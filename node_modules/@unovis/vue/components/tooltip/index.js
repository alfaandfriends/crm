import { defineComponent as p, inject as m, ref as u, onMounted as f, nextTick as d, onUnmounted as v, watch as _, openBlock as h, createElementBlock as w } from "vue";
import { Tooltip as s } from "@unovis/ts";
import { useForwardProps as x, arePropsEqual as y } from "../../utils/props.js";
import { tooltipAccessorKey as g } from "../../utils/context.js";
const B = { "data-vis-tooltip": "" }, T = s.selectors, z = /* @__PURE__ */ p({
  __name: "index",
  props: {
    components: {},
    container: {},
    followCursor: { type: Boolean },
    allowHover: { type: Boolean },
    horizontalPlacement: {},
    horizontalShift: {},
    verticalPlacement: {},
    verticalShift: {},
    triggers: {},
    attributes: {},
    className: {},
    data: {}
  },
  setup(c, { expose: l }) {
    const i = c, n = m(g), t = x(i), o = u();
    return f(() => {
      d(() => {
        o.value = new s(t.value), n.update(o.value);
      });
    }), v(() => {
      var e;
      (e = o.value) == null || e.destroy(), n.destroy();
    }), _(t, (e, r) => {
      var a;
      y(e, r) || (a = o.value) == null || a.setConfig(t.value);
    }), l({
      component: o
    }), (e, r) => (h(), w("div", B));
  }
});
export {
  T as VisTooltipSelectors,
  z as default
};
//# sourceMappingURL=index.js.map
