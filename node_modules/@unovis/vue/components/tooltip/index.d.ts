import { Tooltip } from '@unovis/ts';
export declare const VisTooltipSelectors: typeof import("@unovis/ts/lib/components/tooltip/style");
declare const _default: import("vue").DefineComponent<{
    components: {
        type: import("vue").PropType<import("@unovis/ts").ComponentCore<unknown, import("@unovis/ts").ComponentConfigInterface>[]>;
    };
    container: {
        type: import("vue").PropType<HTMLElement>;
    };
    followCursor: {
        type: import("vue").PropType<boolean>;
    };
    allowHover: {
        type: import("vue").PropType<boolean>;
    };
    horizontalPlacement: {
        type: import("vue").PropType<string>;
    };
    horizontalShift: {
        type: import("vue").PropType<number>;
    };
    verticalPlacement: {
        type: import("vue").PropType<string>;
    };
    verticalShift: {
        type: import("vue").PropType<number>;
    };
    triggers: {
        type: import("vue").PropType<{
            [selector: string]: (data: any, i: number, elements: (SVGElement | HTMLElement)[]) => string | void | HTMLElement;
        }>;
    };
    attributes: {
        type: import("vue").PropType<{
            [attr: string]: string | number | boolean;
        }>;
    };
    className: {
        type: import("vue").PropType<string>;
    };
    data: {
        type: import("vue").PropType<never>;
    };
}, {
    component: import("vue").Ref<Tooltip>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    components: {
        type: import("vue").PropType<import("@unovis/ts").ComponentCore<unknown, import("@unovis/ts").ComponentConfigInterface>[]>;
    };
    container: {
        type: import("vue").PropType<HTMLElement>;
    };
    followCursor: {
        type: import("vue").PropType<boolean>;
    };
    allowHover: {
        type: import("vue").PropType<boolean>;
    };
    horizontalPlacement: {
        type: import("vue").PropType<string>;
    };
    horizontalShift: {
        type: import("vue").PropType<number>;
    };
    verticalPlacement: {
        type: import("vue").PropType<string>;
    };
    verticalShift: {
        type: import("vue").PropType<number>;
    };
    triggers: {
        type: import("vue").PropType<{
            [selector: string]: (data: any, i: number, elements: (SVGElement | HTMLElement)[]) => string | void | HTMLElement;
        }>;
    };
    attributes: {
        type: import("vue").PropType<{
            [attr: string]: string | number | boolean;
        }>;
    };
    className: {
        type: import("vue").PropType<string>;
    };
    data: {
        type: import("vue").PropType<never>;
    };
}>>, {}, {}>;
export default _default;
